{
  "properties": [
    {
      "name": "strategy",
      "type": "java.lang.String",
      "description": "Strategy which defines basic settings for elements interaction.",
      "defaultValue": "jdi"
    },
    {
      "name": "timeout.wait.element",
      "type": "java.lang.Integer",
      "description": "Timeout in seconds to wait for an element on the opened page.",
      "defaultValue": 5
    },
    {
      "name": "timeout.wait.page",
      "type": "java.lang.Integer",
      "description": "Timeout in seconds to wait for a newly opened page to load.",
      "defaultValue": 20
    },
    {
      "name": "domain",
      "type": "java.lang.String",
      "description": "Web application root URL (used if we work with a single application in tests)."
    },
    {
      "name": "driver",
      "type": "java.lang.String",
      "description": "Type of web driver which is used to run the tests.",
      "defaultValue": "chrome"
    },
    {
      "name": "driver.version",
      "type": "java.lang.String",
      "description": "Version of web driver.",
      "defaultValue": "latest"
    },
    {
      "name": "drivers.folder",
      "type": "java.lang.String",
      "description": "Absolute path to the driver folder."
    },
    {
      "name": "screens.folder",
      "type": "java.lang.String",
      "description": "Path to folder for screenshots."
    },
    {
      "name": "list.start.index",
      "type": "java.lang.Integer",
      "description": "Index of initial element in WebList.",
      "defaultValue": 1
    },
    {
      "name": "screenshot.strategy",
      "type": "java.lang.String",
      "description": "When to take screenshot, used by AllureLogger.class."
    },
    {
      "name": "html.code.strategy",
      "type": "java.lang.String",
      "description": "A strategy for writing html-code of the web element last processed before test failure to log."
    },
    {
      "name": "requests.strategy",
      "type": "java.lang.String",
      "description": "When to log requests 4ХХ, 5ХХ errors."
    },
    {
      "name": "browser.kill",
      "type": "java.lang.String",
      "description": "At what time browser should be shut down.",
      "defaultValue": "afterAndBefore"
    },
    {
      "name": "element.search.strategy",
      "type": "java.lang.String",
      "description": "Can find only one or many elements on a page, visible elements only or not."
    },
    {
      "name": "browser.size",
      "type": "java.lang.String",
      "description": "The size of the tested browser.",
      "defaultValue": "MAXIMIZED"
    },
    {
      "name": "page.load.strategy",
      "type": "java.lang.String",
      "description": "Similarly to Selenium, strategies to load the page.",
      "defaultValue": "normal"
    },
    {
      "name": "page.check.after.open",
      "type": "java.lang.String",
      "description": "When to check the page has been opened.",
      "defaultValue": "NONE"
    },
    {
      "name": "assert.type",
      "type": "java.lang.String",
      "description": "Type of used assertions - strict or soft.",
      "defaultValue": "strict"
    },
    {
      "name": "click.type",
      "type": "java.lang.String",
      "description": "Area of the element which is clicked during click action.",
      "defaultValue": "CENTER"
    },
    {
      "name": "text.type",
      "type": "java.lang.String",
      "description": "Strategy for getting text of the element.",
      "defaultValue": "SMART_TEXT"
    },
    {
      "name": "set.text.type",
      "type": "java.lang.String",
      "description": "The way of setting text to the element.",
      "defaultValue": "SET_TEXT"
    },
    {
      "name": "remote.type",
      "type": "java.lang.String",
      "description": "Type or URL of remote web server.",
      "defaultValue": "http://localhost:4444/"
    },
    {
      "name": "driver.remote.url",
      "type": "java.lang.String",
      "description": "Remote URL used to run tests."
    },
    {
      "name": "log.level",
      "type": "java.lang.String",
      "description": "A level of categorizing the entries in the log file.",
      "defaultValue": "info"
    },
    {
      "name": "allure.steps",
      "type": "java.lang.Boolean",
      "description": "Whether to turn on the steps for Allure or not.",
      "defaultValue": true
    },
    {
      "name": "smart.locators",
      "type": "java.lang.String",
      "description": "A list of templates for Smart locators. Should be separated by ; symbol.",
      "defaultValue": "#%s"
    },
    {
      "name": "smart.locators.toName",
      "type": "java.lang.String",
      "description": "Case style for element names used in smart locators template.",
      "defaultValue": "kebab-case"
    },
    {
      "name": "smart.search",
      "type": "java.lang.String",
      "description": "When to use smart locators.",
      "defaultValue": "uiandelements"
    },
    {
      "name": "headless",
      "type": "java.lang.Boolean",
      "description": "Whether to use headless browser or not."
    }
  ],
  "hints": [
    {
      "name": "strategy",
      "values": [
        {
          "value": "jdi"
        },
        {
          "value": "jdi-stable"
        },
        {
          "value": "selenium"
        }
      ]
    },
    {
      "name": "driver",
      "values": [
        {
          "value": "chrome"
        },
        {
          "value": "firefox"
        },
        {
          "value": "ie"
        },
        {
          "value": "edge"
        },
        {
          "value": "opera"
        },
        {
          "value": "safari"
        }
      ]
    },
    {
      "name": "screenshot.strategy",
      "values": [
        {
          "value": "off"
        },
        {
          "value": "onfail"
        },
        {
          "value": "onassert"
        },
        {
          "value": "newpage"
        }
      ]
    },
    {
      "name": "html.code.strategy",
      "values": [
        {
          "value": "off"
        },
        {
          "value": "onfail"
        },
        {
          "value": "onassert"
        },
        {
          "value": "newpage"
        }
      ]
    },
    {
      "name": "requests.strategy",
      "values": [
        {
          "value": "off"
        },
        {
          "value": "onfail"
        },
        {
          "value": "onassert"
        },
        {
          "value": "newpage"
        }
      ]
    },
    {
      "name": "browser.kill",
      "values": [
        {
          "value": "afterAndBefore"
        },
        {
          "value": "after"
        },
        {
          "value": "before"
        }
      ]
    },
    {
      "name": "element.search.strategy",
      "values": [
        {
          "value": "strict"
        },
        {
          "value": "soft"
        },
        {
          "value": "visible, multiple"
        },
        {
          "value": "any, single"
        }
      ]
    },
    {
      "name": "browser.size",
      "values": [
        {
          "value": "MAXIMIZED"
        },
        {
          "value": "1024x762"
        }
      ]
    },
    {
      "name": "page.load.strategy",
      "values": [
        {
          "value": "normal"
        },
        {
          "value": "none"
        },
        {
          "value": "eager"
        }
      ]
    },
    {
      "name": "page.check.after.open",
      "values": [
        {
          "value": "NONE"
        },
        {
          "value": "NEW_PAGE"
        },
        {
          "value": "EVERY_PAGE"
        }
      ]
    },
    {
      "name": "assert.type",
      "values": [
        {
          "value": "strict"
        },
        {
          "value": "soft"
        }
      ]
    },
    {
      "name": "click.type",
      "values": [
        {
          "value": "SMART_CLICK"
        },
        {
          "value": "TOP_LEFT"
        },
        {
          "value": "TOP_RIGHT"
        },
        {
          "value": "BOTTOM_LEFT"
        },
        {
          "value": "BOTTOM_RIGHT"
        },
        {
          "value": "CENTER"
        },
        {
          "value": "JS"
        }
      ]
    },
    {
      "name": "text.type",
      "values": [
        {
          "value": "SMART_TEXT"
        },
        {
          "value": "TEXT"
        },
        {
          "value": "VALUE"
        },
        {
          "value": "INNER"
        },
        {
          "value": "LABEL"
        }
      ]
    },
    {
      "name": "set.text.type",
      "values": [
        {
          "value": "SET_TEXT"
        },
        {
          "value": "SEND_KEYS"
        },
        {
          "value": "CLEAR_SEND_KEYS"
        }
      ]
    },
    {
      "name": "remote.type",
      "values": [
        {
          "value": "sauce"
        },
        {
          "value": "saucelabs"
        },
        {
          "value": "browserstack"
        },
        {
          "value": "selenium_localhost"
        }
      ]
    },
    {
      "name": "log.level",
      "values": [
        {
          "value": "off"
        },
        {
          "value": "fatal"
        },
        {
          "value": "error"
        },
        {
          "value": "warning"
        },
        {
          "value": "step"
        },
        {
          "value": "debug"
        },
        {
          "value": "trace"
        },
        {
          "value": "all"
        }
      ]
    },
    {
      "name": "smart.locators.toName",
      "values": [
        {
          "value": "kebab-case"
        },
        {
          "value": "camelCase"
        },
        {
          "value": "snake_case"
        },
        {
          "value": "PascalCase"
        },
        {
          "value": "UPPER_SNAKE_CASE"
        },
        {
          "value": "First Upper Case"
        },
        {
          "value": "ALL UPPER CASE"
        }
      ]
    },
    {
      "name": "smart.search",
      "values": [
        {
          "value": "false"
        },
        {
          "value": "onlyui"
        },
        {
          "value": "uiandelements"
        },
        {
          "value": "always"
        }
      ]
    }
  ]
}

