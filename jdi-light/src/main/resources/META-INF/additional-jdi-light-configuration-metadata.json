{
  "properties": [
    {
      "name": "strategy",
      "type": "java.lang.String",
      "description": "Strategy which defines basic settings for elements interaction.",
      "defaultValue": "jdi"
    },
    {
      "name": "timeout.wait.element",
      "type": "java.lang.Integer",
      "description": "Timeout in seconds to wait for an element on the opened page.",
      "defaultValue": 5
    },
    {
      "name": "timeout.wait.page",
      "type": "java.lang.Integer",
      "description": "Timeout in seconds to wait for a newly opened page to load.",
      "defaultValue": 20
    },
    {
      "name": "domain",
      "type": "java.lang.String",
      "description": "Web application root URL (used if we work with a single application in tests)."
    },
    {
      "name": "driver",
      "type": "java.lang.String",
      "description": "Type of web driver which is used to run the tests.",
      "defaultValue": "chrome"
    },
    {
      "name": "driver.version",
      "type": "java.lang.String",
      "description": "Version of web driver.",
      "defaultValue": "latest"
    },
    {
      "name": "drivers.folder",
      "type": "java.lang.String",
      "description": "Absolute path to the driver folder."
    },
    {
      "name": "screens.folder",
      "type": "java.lang.String",
      "description": "Path to folder for screenshots."
    },
    {
      "name": "list.start.index",
      "type": "java.lang.Integer",
      "description": "Index of initial element in WebList.",
      "defaultValue": 1
    },
    {
      "name": "screenshot.strategy",
      "type": "java.lang.String",
      "description": "When to take screenshot, used by AllureLogger.class."
    },
    {
      "name": "html.code.strategy",
      "type": "java.lang.String",
      "description": "A strategy for writing html-code of the web element last processed before test failure to log."
    },
    {
      "name": "requests.strategy",
      "type": "java.lang.String",
      "description": "When to log requests 4ХХ, 5ХХ errors."
    },
    {
      "name": "browser.kill",
      "type": "java.lang.String",
      "description": "At what time browser should be shut down.",
      "defaultValue": "afterAndBefore"
    },
    {
      "name": "element.search.strategy",
      "type": "java.lang.String",
      "description": "Can find only one or many elements on a page, visible elements only or not."
    },
    {
      "name": "browser.size",
      "type": "java.lang.String",
      "description": "The size of the tested browser.",
      "defaultValue": "MAXIMIZED"
    },
    {
      "name": "page.load.strategy",
      "type": "java.lang.String",
      "description": "Similarly to Selenium, strategies to load the page.",
      "defaultValue": "normal"
    },
    {
      "name": "page.check.after.open",
      "type": "java.lang.String",
      "description": "When to check the page has been opened.",
      "defaultValue": "NONE"
    },
    {
      "name": "assert.type",
      "type": "java.lang.String",
      "description": "Type of used assertions - strict or soft.",
      "defaultValue": "strict"
    },
    {
      "name": "click.type",
      "type": "java.lang.String",
      "description": "Area of the element which is clicked during click action.",
      "defaultValue": "CENTER"
    },
    {
      "name": "text.type",
      "type": "java.lang.String",
      "description": "Strategy for getting text of the element.",
      "defaultValue": "SMART_TEXT"
    },
    {
      "name": "set.text.type",
      "type": "java.lang.String",
      "description": "The way of setting text to the element.",
      "defaultValue": "SET_TEXT"
    },
    {
      "name": "remote.type",
      "type": "java.lang.String",
      "description": "Type or URL of remote web server.",
      "defaultValue": "selenium_localhost"
    },
    {
      "name": "driver.remote.url",
      "type": "java.lang.String",
      "description": "Remote URL used to run tests."
    },
    {
      "name": "log.level",
      "type": "java.lang.String",
      "description": "A level of categorizing the entries in the log file.",
      "defaultValue": "info"
    },
    {
      "name": "allure.steps",
      "type": "java.lang.Boolean",
      "description": "Whether to turn on the steps for Allure or not.",
      "defaultValue": true
    },
    {
      "name": "smart.locators",
      "type": "java.lang.String",
      "description": "A list of templates for Smart locators. Should be separated by ; symbol.",
      "defaultValue": "#%s"
    },
    {
      "name": "smart.locators.toName",
      "type": "java.lang.String",
      "description": "Case style for element names used in smart locators template.",
      "defaultValue": "kebab-case"
    },
    {
      "name": "smart.search",
      "type": "java.lang.String",
      "description": "When to use smart locators.",
      "defaultValue": "uiandelements"
    },
    {
      "name": "headless",
      "type": "java.lang.Boolean",
      "description": "Whether to use headless browser or not."
    }
  ],
  "hints": [
    {
      "name": "strategy",
      "values": [
        {
          "value": "jdi",
          "description": "click.type - CENTER, text.type - SMART_TEXT, set.text.type - CLEAR_SEND_KEYS, element.search.strategy - visible."
        },
        {
          "value": "jdi-stable",
          "description": "click.type - SMART_CLICK, text.type - SMART_TEXT, set.text.type - SET_TEXT, element.search.strategy - visible., kill.browser - afterAndBefore."
        },
        {
          "value": "selenium",
          "description": "click.type - CENTER, text.type - TEXT, set.text.type - SEND_KEYS, element.search.strategy - any."
        }
      ]
    },
    {
      "name": "driver",
      "values": [
        {
          "value": "chrome",
          "description": "WebDriver for Chrome browser."
        },
        {
          "value": "firefox",
          "description": "WebDriver for Firefox browser."
        },
        {
          "value": "ie",
          "description": "WebDriver for Internet Explorer."
        },
        {
          "value": "edge",
          "description": "WebDriver for Edge browser."
        },
        {
          "value": "opera",
          "description": "WebDriver for Opera browser."
        },
        {
          "value": "safari",
          "description": "WebDriver for Safari browser."
        }
      ]
    },
    {
      "name": "screenshot.strategy",
      "values": [
        {
          "value": "off",
          "description": "Screenshots will not be taken."
        },
        {
          "value": "onfail",
          "description": "When test fails, web element last processed will be highlighted and page screenshot will be taken, saved and added to Allure report as well, if possible."
        },
        {
          "value": "onassert",
          "description": "Page screenshot will be taken when assert is performed."
        },
        {
          "value": "newpage",
          "description": "Page screenshot will be taken after opening a new page."
        }
      ]
    },
    {
      "name": "html.code.strategy",
      "values": [
        {
          "value": "off",
          "description": "Do not write html-code of the web element to log."
        },
        {
          "value": "onfail",
          "description": "Write html-code of the web element last processed before test failure to log."
        },
        {
          "value": "onassert",
          "description": "Write html-code of the web element to log when assert is performed."
        },
        {
          "value": "newpage",
          "description": "Write html-code of the page to log when the page is opened."
        }
      ]
    },
    {
      "name": "requests.strategy",
      "values": [
        {
          "value": "off",
          "description": "Do not log requests 4ХХ, 5ХХ errors."
        },
        {
          "value": "onfail",
          "description": "Log requests 4ХХ, 5ХХ errors when test fails."
        },
        {
          "value": "onassert",
          "description": "Log requests 4ХХ, 5ХХ errors when assert is performed."
        },
        {
          "value": "newpage",
          "description": "Log requests 4ХХ, 5ХХ errors when new page is opened."
        }
      ]
    },
    {
      "name": "browser.kill",
      "values": [
        {
          "value": "afterAndBefore",
          "description": "Shut down the browser after and before the test."
        },
        {
          "value": "after",
          "description": "Shut down the browser after the test."
        },
        {
          "value": "before",
          "description": "Shut down the browser before the test."
        }
      ]
    },
    {
      "name": "element.search.strategy",
      "values": [
        {
          "value": "strict",
          "description": "Find only one element on a page (single), search through visible elements only (visible)."
        },
        {
          "value": "soft",
          "description": "Find many elements on a page (multiple), search through not only visible elements (any)."
        },
        {
          "value": "visible, multiple",
          "description": "Find many elements on a page (multiple), search through visible elements only."
        },
        {
          "value": "any, single",
          "description": "Find only one element on a page, search through not only visible elements."
        }
      ]
    },
    {
      "name": "browser.size",
      "values": [
        {
          "value": "MAXIMIZED",
          "description": "Browser window will be maximized."
        },
        {
          "value": "1024x762",
          "description": "Browser window will be set to 1024x762."
        }
      ]
    },
    {
      "name": "page.load.strategy",
      "values": [
        {
          "value": "normal",
          "description": "Indicates WebDriver should wait for the document readiness state to be \"complete\" after navigation."
        },
        {
          "value": "none",
          "description": "Indicates WebDriver should not wait on the document readiness state after a navigation event."
        },
        {
          "value": "eager",
          "description": "Indicates WebDriver should wait for the document readiness state to become \"interactive\" after navigation."
        }
      ]
    },
    {
      "name": "page.check.after.open",
      "values": [
        {
          "value": "NONE",
          "description": "Do not check the page has been opened."
        },
        {
          "value": "NEW_PAGE",
          "description": "Check the page has been opened for new page."
        },
        {
          "value": "EVERY_PAGE",
          "description": "Check the page has been opened for every page."
        }
      ]
    },
    {
      "name": "assert.type",
      "values": [
        {
          "value": "strict",
          "description": "Soft assertions are disabled."
        },
        {
          "value": "soft",
          "description": "Soft assertions are enabled."
        }
      ]
    },
    {
      "name": "click.type",
      "values": [
        {
          "value": "SMART_CLICK",
          "description": "Click at the element clickable area."
        },
        {
          "value": "TOP_LEFT",
          "description": "Click at the top left corner of the element."
        },
        {
          "value": "TOP_RIGHT",
          "description": "Click at the top right corner of the element."
        },
        {
          "value": "BOTTOM_LEFT",
          "description": "Click at the bottom left corner of the element."
        },
        {
          "value": "BOTTOM_RIGHT",
          "description": "Click at the bottom right corner of the element."
        },
        {
          "value": "CENTER",
          "description": "Click at element center."
        },
        {
          "value": "JS",
          "description": "Click using JavascriptExecutor."
        }
      ]
    },
    {
      "name": "text.type",
      "values": [
        {
          "value": "SMART_TEXT",
          "description": "Combination of TEXT, INNER and VALUE, which are used consistently until the result is not empty."
        },
        {
          "value": "TEXT",
          "description": "Method getText() is used for getting text of the element."
        },
        {
          "value": "VALUE",
          "description": "Attribute \"value\" is used for getting text of the element."
        },
        {
          "value": "INNER",
          "description": "Attribute \"innerText\" is used for getting text of the element."
        },
        {
          "value": "LABEL",
          "description": "label().getText() is used for getting text of the element."
        }
      ]
    },
    {
      "name": "set.text.type",
      "values": [
        {
          "value": "SET_TEXT",
          "description": "Text is assigned to the element using UIElement's setText() method."
        },
        {
          "value": "SEND_KEYS",
          "description": "Text is assigned to the element using UIElement's sendKeys() method."
        },
        {
          "value": "CLEAR_SEND_KEYS",
          "description": "Text is assigned to the element using clear() and sendKeys() methods."
        }
      ]
    },
    {
      "name": "remote.type",
      "values": [
        {
          "value": "sauce",
          "description": "Use Sauce Labs capabilities to run the tests."
        },
        {
          "value": "saucelabs",
          "description": "Use Sauce Labs capabilities to run the tests."
        },
        {
          "value": "browserstack",
          "description": "Use BrowserStack capabilities to run the tests."
        },
        {
          "value": "selenium_localhost",
          "description": "Use Selenium localhost, driver.remote.url should be specified."
        }
      ]
    },
    {
      "name": "log.level",
      "values": [
        {
          "value": "off",
          "description": "No logging."
        },
        {
          "value": "fatal",
          "description": "Log unexpected errors."
        },
        {
          "value": "error",
          "description": "Log critical errors."
        },
        {
          "value": "warning",
          "description": "Log errors due to wrong params."
        },
        {
          "value": "step",
          "description": "Log steps - business related info."
        },
        {
          "value": "info",
          "description": "Log actions info."
        },
        {
          "value": "debug",
          "description": "Log debug messages."
        },
        {
          "value": "trace",
          "description": "Log trace info."
        },
        {
          "value": "all",
          "description": "Log all messages."
        }
      ]
    },
    {
      "name": "smart.locators.toName",
      "values": [
        {
          "value": "kebab-case",
          "description": "Will produce [ui=last-name] locator for public WebElement lastName if smart.locators=[ui=%s]."
        },
        {
          "value": "camelCase",
          "description": "Will produce [ui=lastName] locator for public WebElement lastName if smart.locators=[ui=%s]."
        },
        {
          "value": "snake_case",
          "description": "Will produce [ui=last_name] locator for public WebElement lastName if smart.locators=[ui=%s]."
        },
        {
          "value": "PascalCase",
          "description": "Will produce [ui=LastName] locator for public WebElement lastName if smart.locators=[ui=%s]."
        },
        {
          "value": "UPPER_SNAKE_CASE",
          "description": "Will produce [ui=LAST_NAME] locator for public WebElement lastName if smart.locators=[ui=%s]."
        },
        {
          "value": "First Upper Case",
          "description": "Will produce //*[text()='Submit Form'] locator for public WebElement submitForm if smart.locators=//*[text()='%s']"
        },
        {
          "value": "ALL UPPER CASE",
          "description": "Will produce //*[text()='SUBMIT FORM'] locator for public WebElement submitForm if smart.locators=//*[text()='%s']"
        }
      ]
    },
    {
      "name": "smart.search",
      "values": [
        {
          "value": "false",
          "description": "Do not use smart search."
        },
        {
          "value": "onlyui",
          "description": "Use smart search for for UI elements."
        },
        {
          "value": "uiandelements",
          "description": "Use smart search for UI elements and Page Objects."
        },
        {
          "value": "always",
          "description": "Always use smart search."
        }
      ]
    }
  ]
}

